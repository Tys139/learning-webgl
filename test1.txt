import G6 from '@antv/g6';

const ICON_MAP = {
  a: './user.png',
  b: './big-data.png',
  c: './process.png'
};

G6.registerNode(
  'card-node',
  {
    drawShape: function drawShape(cfg, group) {
      //const color = cfg.error ? '#F4664A' : '#30BF78';
      var color
      switch (cfg.error)
      {
       case 'data':
         color ='#F4664A';
         break;
       case 'process':
         color ='#30BF78';
         break;
         case 'user':
           color ='#5F95FF';
          break;}
      const r = 2;
      const shape = group.addShape('rect', {
        attrs: {
          x: 0,
          y: 0,
          width: 300,
          height: 80,
          stroke: color,
          radius: r,
          fill: '#e5e5e5',
        },
        name: 'main-box',
        draggable: true,
      });

      group.addShape('rect', {
        attrs: {
          x: 0,
          y: 0,
          width: 300,
          height: 30,
          fill: color,
          radius: [r, r, 0, 0],
        },
        name: 'title-box',
        draggable: true,
      });

      // left icon
      group.addShape('image', {
        attrs: {
          x: 4,
          y: 2,
          height: 16,
          width: 16,
          cursor: 'pointer',
          img: ICON_MAP[cfg.nodeType || 'app'],
        },
        name: 'node-icon',
      });

      // title text
      group.addShape('text', {
        attrs: {
          textBaseline: 'top',
          y: 2,
          x: 40,
          lineHeight: 20,
          text: cfg.title,
          fill: '#000000',
        },
        name: 'title',
      });
      // The content list
      cfg.panels.forEach((item, index) => {
        // name text
        group.addShape('text', {
          attrs: {
            textBaseline: 'top',
            y: 35,
            x: 24 + index * 60,
            lineHeight: 20,
            text: item.title,
            fill: 'rgba(0,0,0, 0.4)',
          },
          name: `index-title-${index}`,
        });

        // value text
        group.addShape('text', {
          attrs: {
            textBaseline: 'top',
            y: 60 ,
            x: 24 + index * 60,
            lineHeight: 20,
            text: item.value,
            fill: '#595959',
          },
          name: `index-title-${index}`,
        });
      });
      return shape;
    },
  },
  'single-node',
);

const container = document.getElementById('container');
const width = container.scrollWidth;
const height = container.scrollHeight || 950;
const graph = new G6.Graph({
  container: 'container',
  width,
  height,
  animate: true,
  // translate the graph to align the canvas's center, support by v3.5.1
  fitCenter: true,
  modes: {
    default: ['drag-canvas', 'drag-node','zoom-canvas'],
  },
  layout: {
    type: 'mds',
    linkDistance: 500,
  },
  defaultEdge: {
    type: 'circle-running',
    style: {
      endArrow: true
    },
    labelCfg: {
      autoRotate: true,
      style: {
        lineWidth: 2,
        stroke: '#bae7ff',
      }
    }
  },
  defaultNode: {
    type: 'card-node',
  },
  fitView: true,
});

const data = {
  nodes: [
    {
      title: 'node1',
      error: 'user',
      nodeType: 'a',
      id: 'node1',
      nodeLevel: 2,
      panels: [
        { title: '成功率', value: '11%' },
        { title: '耗时', value: '111' },
        { title: '错误数', value: '111' },
      ],

    },
    {
      title: 'node2',
      error: 'data',
      nodeType: 'b',
      id: 'node2',
      nodeLevel: 0,
      panels: [
        { title: '成功率', value: '11%' },
        { title: '耗时', value: '111' },
        { title: '错误数', value: '111' },
      ],

    },
    {
      title: 'node3',
      error: 'process',
      nodeType: 'c',
      id: 'node3',
      nodeLevel: 3,
      panels: [
        { title: '成功率', value: '11%' },
        { title: '耗时', value: '111' },
        { title: '错误数', value: '111' },
      ],
      collapse: true,

    },
  ],
  edges:[{source: 'node1' ,target: 'node2',size: 2},
  {source: 'node2' ,target: 'node3', size: 2},
  {source: 'node3' ,target: 'node1', size: 2}]
};



  // setInterval(() => {
  //   data.nodes.forEach((node) => {
  //     node.x += Math.random() * 50 - 25;
  //     node.y += Math.random() * 50 - 25;
  //   });
  //   graph.changeData(data);
  // }, 600);

  G6.registerEdge(
    'circle-running',
    {
      afterDraw(cfg, group) {
        // get the first shape in the group, it is the edge's path here=
        const shape = group.get('children')[0];
        // the start position of the edge's path
        const startPoint = shape.getPoint(0);
  
        // add red circle shape
        const circle = group.addShape('circle', {
          attrs: {
            x: startPoint.x,
            y: startPoint.y,
            fill: '#1890ff',
            r: 3,
          },
          name: 'circle-shape',
        });
  
        // animation for the red circle
        circle.animate(
          (ratio) => {
            // the operations in each frame. Ratio ranges from 0 to 1 indicating the prograss of the animation. Returns the modified configurations
            // get the position on the edge according to the ratio
            const tmpPoint = shape.getPoint(ratio);
            // returns the modified configurations here, x and y here
            return {
              x: tmpPoint.x,
              y: tmpPoint.y,
            };
          },
          {
            repeat: true, // Whether executes the animation repeatly
            duration: 6000, // the duration for executing once
          },
        );
      },
    },
    'cubic', // extend the built-in edge 'cubic'
  );

graph.data(data);
graph.render();

if (typeof window !== 'undefined')
  window.onresize = () => {
    if (!graph || graph.get('destroyed')) return;
    if (!container || !container.scrollWidth || !container.scrollHeight) return;
    graph.changeSize(container.scrollWidth, container.scrollHeight);
  };

  const clearFocusEdgeState = (graph) => {
    const focusEdges = graph.findAllByState('edge', 'selected');
    focusEdges.forEach((fedge) => {
      graph.setItemState(fedge, 'selected', false);
    });
  };
  const clearFocusNodeState = (graph) => {
    const focusNodes = graph.findAllByState('node', 'selected');
    focusNodes.forEach((fnode) => {
      graph.setItemState(fnode, 'selected', false); // false
    });
  };
  graph.on('node:mouseenter', (evt) => {
    const { item } = evt;
    graph.setItemState(item, 'active', true);
  });
  
  graph.on('node:mouseleave', (evt) => {
    const { item } = evt;
    graph.setItemState(item, 'active', false);
  });
  
  graph.on('node:click', (evt) => {
    clearFocusEdgeState(graph);
    clearFocusNodeState(graph);
    const { item } = evt;
    
    const relatedEdges = item.getEdges();
        relatedEdges.forEach((edge) => {
          graph.setItemState(edge, 'selected', true);
          console.log(edge)
        });
    graph.setItemState(item, 'selected', true);
    const group = item.get('group')
    console.log(group)
  });
  graph.on('canvas:click', (evt) => {
    graph.getNodes().forEach((node) => {
      graph.clearItemStates(node);
    });
  });
  
